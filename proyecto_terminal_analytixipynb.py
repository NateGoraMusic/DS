# -*- coding: utf-8 -*-
"""PROYECTO TERMINAL ANALYTIXipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17hFWkpDS8G6DE94gKvD4Ea7uMw90UxKh
"""

import pandas as pd
import matplotlib.pyplot as plt
from shapely.geometry import Polygon
import ast

# Cargar el archivo Excel
data = pd.read_excel("coords.xlsx")

# Convertir la columna de coordenadas a polígonos de Shapely
data['coords'] = data['coords'].apply(ast.literal_eval)  # Convertir de string a lista de tuplas
data['polygon'] = data['coords'].apply(lambda x: Polygon(x))

# Crear un mapa base
fig, ax = plt.subplots()
ax.set_aspect('equal')

# Calcular los límites mínimos y máximos
minx, miny, maxx, maxy = float('inf'), float('inf'), float('-inf'), float('-inf')
for polygon in data['polygon']:
    x, y = polygon.exterior.xy
    ax.fill(x, y, alpha=0.5, fc='blue', ec='black')
    minx = min(minx, min(x))
    maxx = max(maxx, max(x))
    miny = min(miny, min(y))
    maxy = max(maxy, max(y))

# Configurar los límites del mapa
ax.set_xlim(minx, maxx)
ax.set_ylim(miny, maxy)

# Mostrar el mapa
plt.show()

import pandas as pd
import folium
from shapely.geometry import Polygon
import ast

# Cargar el archivo Excel
data = pd.read_excel("coords.xlsx")

# Convertir la columna de coordenadas a polígonos de Shapely
data['coords'] = data['coords'].apply(ast.literal_eval)  # Convertir de string a lista de tuplas
data['polygon'] = data['coords'].apply(lambda x: Polygon(x))

# Calcular los límites mínimos y máximos para centrar el mapa
minx, miny, maxx, maxy = float('inf'), float('inf'), float('-inf'), float('-inf')
for polygon in data['polygon']:
    minx = min(minx, polygon.bounds[0])
    maxx = max(maxx, polygon.bounds[2])
    miny = min(miny, polygon.bounds[1])
    maxy = max(maxy, polygon.bounds[3])

# Crear un mapa base
m = folium.Map(location=[(miny + maxy) / 2, (minx + maxx) / 2], zoom_start=13)

# Añadir los polígonos al mapa
for _, row in data.iterrows():
    # Crear un polígono para cada colonia
    sim_geo = folium.GeoJson(data={
        'type': 'Polygon',
        'coordinates': [row['coords']]
    }, style_function=lambda x: {'fillColor': 'blue', 'color': 'black'})
    # Añadir un popup con el nombre de la colonia
    folium.Popup(row['COLONIA']).add_to(sim_geo)
    sim_geo.add_to(m)

# Mostrar el mapa
m.save('map.html')

import pandas as pd
import folium
from shapely.geometry import Polygon
import ast
from IPython.display import display

# Cargar el archivo Excel
data = pd.read_excel("coords.xlsx")

# Convertir la columna de coordenadas a polígonos de Shapely
data['coords'] = data['coords'].apply(ast.literal_eval)  # Convertir de string a lista de tuplas
data['polygon'] = data['coords'].apply(lambda x: Polygon(x))

# Calcular los límites mínimos y máximos para centrar el mapa
minx, miny, maxx, maxy = float('inf'), float('inf'), float('-inf'), float('-inf')
for polygon in data['polygon']:
    minx = min(minx, polygon.bounds[0])
    maxx = max(maxx, polygon.bounds[2])
    miny = min(miny, polygon.bounds[1])
    maxy = max(maxy, polygon.bounds[3])

# Crear un mapa base
m = folium.Map(location=[(miny + maxy) / 2, (minx + maxx) / 2], zoom_start=13)

# Añadir los polígonos al mapa
for _, row in data.iterrows():
    # Crear un polígono para cada colonia
    sim_geo = folium.GeoJson(data={
        'type': 'Polygon',
        'coordinates': [row['coords']]
    }, style_function=lambda x: {'fillColor': 'blue', 'color': 'black'})
    # Añadir un popup con el nombre de la colonia
    folium.Popup(row['COLONIA']).add_to(sim_geo)
    sim_geo.add_to(m)

# Mostrar el mapa
display(m)

import folium
import pandas as pd
import ast

# Cargar los datos de colonias y NSE desde el archivo combinado
data = pd.read_excel("coordsnse.xlsx")  # Asegúrate de tener este archivo

# Definimos una función para convertir el NSE a un color para el mapa de calor.
def nse_to_color(nse):
    if nse == 'A/B':
        return 'darkred'
    elif nse == 'C+':
        return 'red'
    elif nse == 'C':
        return 'orange'
    elif nse == 'C-':
        return 'beige'
    elif nse == 'D+':
        return 'lightgreen'
    elif nse == 'D':
        return 'green'
    elif nse == 'E':
        return 'darkgreen'
    else:  # 'N/D' o cualquier otro valor no reconocido
        return 'gray'

# Crear un mapa base usando Folium
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir polígonos al mapa
for _, row in data.iterrows():
    # Convertir la cadena de coordenadas en una lista de tuplas
    coords = ast.literal_eval(row['coords'])

    # Definir el color basado en el NSE
    color = nse_to_color(row['NSE'])  # Utiliza la función nse_to_color definida anteriormente

    # Crear el GeoJson de la colonia
    geojson = folium.GeoJson(
        data={
            'type': 'Polygon',
            'coordinates': [coords]
        },
        style_function=lambda feature, color=color: {
            'fillColor': color,
            'color': 'black',
            'weight': 1,
            'fillOpacity': 0.7
        },
        tooltip=f"{row['COLONIA']} - NSE: {row['NSE']}"  # Tooltip con nombre de la colonia y NSE
    )
    geojson.add_to(m)

# Mostrar el mapa
m

from shapely.geometry import Polygon
import pandas as pd
import geopandas as gpd
import ast

# Cargar los datos de NSE y coordenadas de las colonias desde Excel
df_colonias = pd.read_excel("coordsnse.xlsx")

# Convertir la cadena de la lista de coordenadas en objetos Polygon
# Asumiendo que la columna 'coords' está en el formato de lista de Python almacenada como texto
df_colonias['geometry'] = df_colonias['coords'].apply(lambda x: Polygon(ast.literal_eval(x)))

# Convertir el DataFrame en un GeoDataFrame
gdf_colonias = gpd.GeoDataFrame(df_colonias, geometry='geometry')

# Asegurarse de que el CRS (Sistema de Referencia de Coordenadas) es el correcto, por ejemplo, WGS84
gdf_colonias.crs = "EPSG:4326"

# Ahora cargar el archivo GeoPackage
gdf_uso_suelo = gpd.read_file("zonificacion.gpkg")

# Realizar la unión espacial
gdf_combined = gpd.sjoin(gdf_colonias, gdf_uso_suelo, how='left', op='intersects')

# Realizar la unión espacial
gdf_combined = gpd.sjoin(gdf_colonias, gdf_uso_suelo, how='left', op='intersects')

# Verificar las primeras filas del GeoDataFrame combinado para asegurarse de que los datos se han unido
print(gdf_combined.head())

import folium

# Crear un mapa base
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir los polígonos de las zonas al mapa
for _, row in gdf_combined.iterrows():
    # Asegúrate de que la geometría no es vacía
    if not row['geometry'].is_empty:
        # Simplificar la geometría para mejorar el rendimiento si es necesario
        simplified_geometry = row['geometry'].simplify(tolerance=0.001, preserve_topology=True)
        folium.GeoJson(
            simplified_geometry,
            tooltip=f"NSE: {row['NSE']} - COS: {row.get('cos', 'N/A')} - CUS: {row.get('cus', 'N/A')}"
        ).add_to(m)

# Guardar el mapa en un archivo html para visualizarlo en un navegador
m.save('mapa.html')

# Exportar el GeoDataFrame combinado a un nuevo archivo shapefile
gdf_combined.to_file('gdf_combined.shp')

import folium

# Crear un mapa base con Folium
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir los polígonos de las zonas al mapa
for _, row in gdf_combined.iterrows():
    # Asegúrate de que la geometría no es vacía
    if not row['geometry'].is_empty:
        # Simplificar la geometría para mejorar el rendimiento si es necesario
        simplified_geometry = row['geometry'].simplify(tolerance=0.001, preserve_topology=True)
        folium.GeoJson(
            simplified_geometry.__geo_interface__,
            style_function=lambda x: {
                'fillColor': 'blue', # Aquí puedes poner una función que dependa de algún valor para cambiar el color
                'color': 'black',
                'weight': 1,
                'fillOpacity': 0.6
            },
            tooltip=f"NSE: {row['NSE']} - COS: {row.get('cos', 'N/A')} - CUS: {row.get('cus', 'N/A')}"
        ).add_to(m)

# Mostrar el mapa
m

import folium
import pandas as pd
import ast

# Función para convertir el NSE y los coeficientes a un color para el mapa de calor
def combined_to_color(nse, cos, cus):
    if nse in ['A/B', 'C+'] and (cos >= 5 or cus >= 5):
        return 'darkred'
    elif nse in ['A/B', 'C+']:
        return 'red'
    elif nse == 'C' and (cos >= 5 or cus >= 5):
        return 'orange'
    elif nse == 'C':
        return 'beige'
    elif nse in ['C-', 'D+', 'D'] and (cos >= 5 or cus >= 5):
        return 'lightgreen'
    else:
        return 'green'

# Cargar las bases de datos

data_nse = pd.read_excel("coordsnse.xlsx")
data_coefs = pd.read_excel("coefs.xlsx")
data_coefs.rename(columns={'CLAVE_1': 'CLAVE'}, inplace=True)

# Unir las bases de datos
combined_data = pd.merge(data_nse, data_coefs, on=['ENTIDAD', 'CLAVE', 'COLONIA', 'NOMBRE_MUN'], how='inner')

# Convertir 'cos' y 'cus' a numéricos
combined_data['cos'] = pd.to_numeric(combined_data['cos'], errors='coerce')
combined_data['cus'] = pd.to_numeric(combined_data['cus'], errors='coerce')

# Crear el mapa
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir polígonos al mapa
for _, row in combined_data.iterrows():
    coords = ast.literal_eval(row['coords'])
    color = combined_to_color(row['NSE'], row['cos'], row['cus'])

    geojson = folium.GeoJson(
        data={
            'type': 'Polygon',
            'coordinates': [coords]
        },
        style_function=lambda feature, color=color: {
            'fillColor': color,
            'color': 'black',
            'weight': 1,
            'fillOpacity': 0.7
        },
        tooltip=f"{row['COLONIA']} - NSE: {row['NSE']} - COS: {row['cos']} - CUS: {row['cus']}"
    )
    geojson.add_to(m)

# Mostrar el mapa
m

import folium
import pandas as pd
import ast

# Cargar los datos desde el archivo
data = pd.read_excel("coordsnse_con_precios_actualizados.xlsx")  # Asegúrate de tener este archivo

# Convertir NSE a puntaje
nse_scores = {'A/B': 7, 'C+': 6, 'C': 5, 'C-': 4, 'D+': 3, 'D': 2, 'E': 1, 'N/D': 0}
data['NSE_Score'] = data['NSE'].map(nse_scores)

# Normalizar precios por metro cuadrado
max_price_casa = data['Precio/mt2 Casa'].max()
max_price_departamento = data['Precio/mt2 Departamento'].max()
data['Precio/mt2 Casa Normalizado'] = data['Precio/mt2 Casa'] / max_price_casa
data['Precio/mt2 Departamento Normalizado'] = data['Precio/mt2 Departamento'] / max_price_departamento
data.fillna({'Precio/mt2 Casa Normalizado': 0, 'Precio/mt2 Departamento Normalizado': 0}, inplace=True)

# Calcular la calificación general y normalizarla
data['Calificación'] = (0.7 * (data['Precio/mt2 Departamento Normalizado'] - data['Precio/mt2 Casa Normalizado'])) + (0.3 * (data['NSE_Score'] / 7))
data['Calificación Normalizada'] = (data['Calificación'] - data['Calificación'].min()) / (data['Calificación'].max() - data['Calificación'].min())

# Definir una función para convertir la calificación normalizada en un color para el mapa de calor
def calificacion_to_color(calificacion):
    if calificacion >= 0.75:
        return 'darkred'
    elif calificacion >= 0.5:
        return 'red'
    elif calificacion >= 0.25:
        return 'orange'
    else:
        return 'green'

# Crear un mapa base usando Folium
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir polígonos al mapa
for _, row in data.iterrows():
    coords = ast.literal_eval(row['coords'])
    color = calificacion_to_color(row['Calificación Normalizada'])

    # Preparar el texto del tooltip
    tooltip_text = (
        f"Colonia: {row['COLONIA']}<br>"
        f"NSE: {row['NSE']}<br>"
        f"Precio/mt2 Casa: {row['Precio/mt2 Casa']:.2f}<br>"
        f"Precio/mt2 Departamento: {row['Precio/mt2 Departamento']:.2f}<br>"
        f"Calificación: {row['Calificación Normalizada']:.2f}"
    )

    geojson = folium.GeoJson(
        data={'type': 'Polygon', 'coordinates': [coords]},
        style_function=lambda feature, color=color: {
            'fillColor': color, 'color': 'black', 'weight': 1, 'fillOpacity': 0.7
        },
        tooltip=folium.Tooltip(tooltip_text)
    )
    geojson.add_to(m)

# Mostrar el mapa
m

m.save('analytix.html')

import folium
import pandas as pd
import ast

# Cargar los datos desde el archivo
data = pd.read_excel("coordsnse_con_precios_actualizados.xlsx")  # Asegúrate de tener este archivo

# Convertir NSE a puntaje
nse_scores = {'A/B': 7, 'C+': 6, 'C': 5, 'C-': 4, 'D+': 3, 'D': 2, 'E': 1, 'N/D': 0}
data['NSE_Score'] = data['NSE'].map(nse_scores)

# Normalizar precios por metro cuadrado
max_price_casa = data['Precio/mt2 Casa'].max()
max_price_departamento = data['Precio/mt2 Departamento'].max()
data['Precio/mt2 Casa Normalizado'] = data['Precio/mt2 Casa'] / max_price_casa
data['Precio/mt2 Departamento Normalizado'] = data['Precio/mt2 Departamento'] / max_price_departamento
data.fillna({'Precio/mt2 Casa Normalizado': 0, 'Precio/mt2 Departamento Normalizado': 0}, inplace=True)

# Calcular la calificación general y normalizarla
data['Calificación'] = (0.7 * (data['Precio/mt2 Departamento Normalizado'] - data['Precio/mt2 Casa Normalizado'])) + (0.3 * (data['NSE_Score'] / 7))
data['Calificación Normalizada'] = (data['Calificación'] - data['Calificación'].min()) / (data['Calificación'].max() - data['Calificación'].min())

# Definir una función para convertir la calificación normalizada en un color para el mapa de calor
def calificacion_to_color(calificacion):
    if calificacion >= 0.75:
        return 'darkred'
    elif calificacion >= 0.5:
        return 'red'
    elif calificacion >= 0.25:
        return 'orange'
    else:
        return 'green'

# Crear un mapa base usando Folium
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir polígonos al mapa
for _, row in data.iterrows():
    coords = ast.literal_eval(row['coords'])
    color = calificacion_to_color(row['Calificación Normalizada'])

    # Preparar el texto del tooltip
    tooltip_text = (
        f"Colonia: {row['COLONIA']}<br>"
        f"NSE: {row['NSE']}<br>"
        f"Precio/mt2 Casa: {row['Precio/mt2 Casa']:.2f}<br>"
        f"Precio/mt2 Departamento: {row['Precio/mt2 Departamento']:.2f}<br>"
        f"Calificación: {row['Calificación Normalizada']:.2f}"
    )

    geojson = folium.GeoJson(
        data={'type': 'Polygon', 'coordinates': [coords]},
        style_function=lambda feature, color=color: {
            'fillColor': color, 'color': 'black', 'weight': 1, 'fillOpacity': 0.7
        },
        tooltip=folium.Tooltip(tooltip_text)
    )
    geojson.add_to(m)

# Mostrar el mapa
m

m.save('analytix.html')

import folium
import pandas as pd
import ast

# Cargar los datos desde el archivo
data = pd.read_excel("coordsnse_con_precios_actualizados.xlsx")  # Asegúrate de tener este archivo

# Convertir NSE a puntaje
nse_scores = {'A/B': 7, 'C+': 6, 'C': 5, 'C-': 4, 'D+': 3, 'D': 2, 'E': 1, 'N/D': 0}
data['NSE_Score'] = data['NSE'].map(nse_scores)

# Normalizar precios por metro cuadrado
max_price_casa = data['Precio/mt2 Casa'].max()
max_price_departamento = data['Precio/mt2 Departamento'].max()
data['Precio/mt2 Casa Normalizado'] = data['Precio/mt2 Casa'] / max_price_casa
data['Precio/mt2 Departamento Normalizado'] = data['Precio/mt2 Departamento'] / max_price_departamento
data.fillna({'Precio/mt2 Casa Normalizado': 0, 'Precio/mt2 Departamento Normalizado': 0}, inplace=True)

# Calcular la calificación general y normalizarla
data['Calificación'] = (0.7 * (data['Precio/mt2 Departamento Normalizado'] - data['Precio/mt2 Casa Normalizado'])) + (0.3 * (data['NSE_Score'] / 7))
data['Calificación Normalizada'] = (data['Calificación'] - data['Calificación'].min()) / (data['Calificación'].max() - data['Calificación'].min())

# Definir una función para convertir la calificación normalizada en un color para el mapa de calor
def calificacion_to_color(calificacion):
    if calificacion >= 0.75:
        return 'darkred'
    elif calificacion >= 0.5:
        return 'red'
    elif calificacion >= 0.25:
        return 'orange'
    else:
        return 'green'

# Crear un mapa base usando Folium
m = folium.Map(location=[20.659698, -103.349609], zoom_start=12)

# Añadir polígonos al mapa
for _, row in data.iterrows():
    coords = ast.literal_eval(row['coords'])
    color = calificacion_to_color(row['Calificación Normalizada'])

    # Preparar el texto del tooltip con formato de moneda
    tooltip_text = (
        f"Colonia: {row['COLONIA']}<br>"
        f"NSE: {row['NSE']}<br>"
        f"Precio/mt2 Casa: ${row['Precio/mt2 Casa']:,.2f}<br>"
        f"Precio/mt2 Departamento: ${row['Precio/mt2 Departamento']:,.2f}<br>"
        f"Calificación: {row['Calificación Normalizada']:.2f}"
    )

    geojson = folium.GeoJson(
        data={'type': 'Polygon', 'coordinates': [coords]},
        style_function=lambda feature, color=color: {
            'fillColor': color, 'color': 'black', 'weight': 1, 'fillOpacity': 0.7
        },
        tooltip=folium.Tooltip(tooltip_text)
    )
    geojson.add_to(m)

# Añadir una leyenda al mapa
legend_html = '''
<div style="position: fixed;
            bottom: 50px; left: 50px; width: 170px; height: 160px;
            border:2px solid grey; z-index:9999; font-size:14px;
            background-color:white;">
    &nbsp; <b>Calidad de Zona</b> <br>
    &nbsp; <i class="fa fa-square" style="color:darkred"></i>&nbsp; Excelente (0.75 - 1.00)<br>
    &nbsp; <i class="fa fa-square" style="color:red"></i>&nbsp; Buena (0.50 - 0.75)<br>
    &nbsp; <i class="fa fa-square" style="color:orange"></i>&nbsp; Regular (0.25 - 0.50)<br>
    &nbsp; <i class="fa fa-square" style="color:green"></i>&nbsp; Pobre (0.00 - 0.25)
</div>
'''
m.get_root().html.add_child(folium.Element(legend_html))

# Mostrar el mapa
m

m.save('analytix.html')

